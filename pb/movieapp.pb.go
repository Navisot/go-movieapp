// Code generated by protoc-gen-go. DO NOT EDIT.
// source: movieapp.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_809fafff4565f049, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type MovieInfo struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Isbn                 string    `protobuf:"bytes,2,opt,name=isbn,proto3" json:"isbn,omitempty"`
	Title                string    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Director             *Director `protobuf:"bytes,4,opt,name=director,proto3" json:"director,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MovieInfo) Reset()         { *m = MovieInfo{} }
func (m *MovieInfo) String() string { return proto.CompactTextString(m) }
func (*MovieInfo) ProtoMessage()    {}
func (*MovieInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_809fafff4565f049, []int{1}
}

func (m *MovieInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovieInfo.Unmarshal(m, b)
}
func (m *MovieInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovieInfo.Marshal(b, m, deterministic)
}
func (m *MovieInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovieInfo.Merge(m, src)
}
func (m *MovieInfo) XXX_Size() int {
	return xxx_messageInfo_MovieInfo.Size(m)
}
func (m *MovieInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MovieInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MovieInfo proto.InternalMessageInfo

func (m *MovieInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MovieInfo) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

func (m *MovieInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MovieInfo) GetDirector() *Director {
	if m != nil {
		return m.Director
	}
	return nil
}

type Director struct {
	Firstname            string   `protobuf:"bytes,1,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname             string   `protobuf:"bytes,2,opt,name=lastname,proto3" json:"lastname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Director) Reset()         { *m = Director{} }
func (m *Director) String() string { return proto.CompactTextString(m) }
func (*Director) ProtoMessage()    {}
func (*Director) Descriptor() ([]byte, []int) {
	return fileDescriptor_809fafff4565f049, []int{2}
}

func (m *Director) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Director.Unmarshal(m, b)
}
func (m *Director) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Director.Marshal(b, m, deterministic)
}
func (m *Director) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Director.Merge(m, src)
}
func (m *Director) XXX_Size() int {
	return xxx_messageInfo_Director.Size(m)
}
func (m *Director) XXX_DiscardUnknown() {
	xxx_messageInfo_Director.DiscardUnknown(m)
}

var xxx_messageInfo_Director proto.InternalMessageInfo

func (m *Director) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *Director) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

type Id struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_809fafff4565f049, []int{3}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Status struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_809fafff4565f049, []int{4}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*MovieInfo)(nil), "pb.MovieInfo")
	proto.RegisterType((*Director)(nil), "pb.Director")
	proto.RegisterType((*Id)(nil), "pb.Id")
	proto.RegisterType((*Status)(nil), "pb.Status")
}

func init() { proto.RegisterFile("movieapp.proto", fileDescriptor_809fafff4565f049) }

var fileDescriptor_809fafff4565f049 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xd7, 0xb8, 0xcd, 0xf6, 0xed, 0xdc, 0xe1, 0xc5, 0x43, 0x29, 0x22, 0x23, 0x03, 0x99,
	0x1e, 0x86, 0xcc, 0x6f, 0xa0, 0x13, 0xd9, 0xc1, 0xcb, 0x86, 0x17, 0x6f, 0xe9, 0x92, 0x41, 0xa0,
	0x6d, 0x42, 0x9a, 0x15, 0xfc, 0xa4, 0x7e, 0x1d, 0x49, 0xfa, 0x47, 0x8a, 0x78, 0xcb, 0xf3, 0xfc,
	0x9e, 0x97, 0xf7, 0x4f, 0x60, 0x5e, 0xa8, 0x5a, 0x0a, 0xa6, 0xf5, 0x5a, 0x1b, 0x65, 0x15, 0x12,
	0x9d, 0xd1, 0x4b, 0x98, 0xbc, 0x16, 0xda, 0x7e, 0x51, 0x05, 0xd1, 0xbb, 0xc3, 0xbb, 0xf2, 0xa4,
	0x70, 0x0e, 0x44, 0xf2, 0x24, 0x58, 0x04, 0xab, 0x68, 0x4f, 0x24, 0x47, 0x84, 0xb1, 0xac, 0xb2,
	0x32, 0x21, 0xde, 0xf1, 0x6f, 0xbc, 0x86, 0x89, 0x95, 0x36, 0x17, 0xc9, 0x85, 0x37, 0x1b, 0x81,
	0x2b, 0x08, 0xb9, 0x34, 0xe2, 0x68, 0x95, 0x49, 0xc6, 0x8b, 0x60, 0x15, 0x6f, 0x66, 0x6b, 0x9d,
	0xad, 0xb7, 0xad, 0xb7, 0xef, 0x29, 0xdd, 0x42, 0xd8, 0xb9, 0x78, 0x03, 0xd1, 0x49, 0x9a, 0xca,
	0x96, 0xac, 0x10, 0x6d, 0xdb, 0x5f, 0x03, 0x53, 0x08, 0x73, 0xd6, 0xc2, 0x66, 0x82, 0x5e, 0xd3,
	0x14, 0xc8, 0x8e, 0xbb, 0x59, 0x6a, 0x96, 0x9f, 0xbb, 0xda, 0x46, 0xd0, 0x5b, 0x98, 0x1e, 0x2c,
	0xb3, 0xe7, 0x6a, 0xc8, 0x27, 0x2d, 0xdf, 0x7c, 0x07, 0x30, 0xf3, 0x3b, 0x1f, 0x84, 0xa9, 0xe5,
	0x51, 0xe0, 0x3d, 0x44, 0x6f, 0xc2, 0x7a, 0xab, 0xc2, 0xc8, 0xcd, 0xed, 0x6f, 0x93, 0x5e, 0xb9,
	0x67, 0x7f, 0x1d, 0x3a, 0x7a, 0x0c, 0x70, 0x09, 0x61, 0x17, 0xc5, 0xa9, 0xc3, 0x3b, 0xfe, 0x27,
	0x86, 0x77, 0x10, 0xbf, 0x18, 0xc1, 0xac, 0x68, 0x72, 0x43, 0x9e, 0xb6, 0x65, 0x74, 0x84, 0x0f,
	0x10, 0x7f, 0x68, 0xfe, 0x5f, 0x0e, 0x9c, 0x6c, 0x16, 0xa1, 0x23, 0x5c, 0x42, 0xbc, 0x15, 0xb9,
	0xe8, 0xb2, 0x5d, 0xef, 0x41, 0xe8, 0x79, 0xfc, 0x49, 0x74, 0x96, 0x4d, 0xfd, 0x37, 0x3f, 0xfd,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x5b, 0x51, 0x93, 0xf8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MovieServiceClient interface {
	GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MovieService_GetMoviesClient, error)
	GetMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieInfo, error)
	CreateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type movieServiceClient struct {
	cc *grpc.ClientConn
}

func NewMovieServiceClient(cc *grpc.ClientConn) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MovieService_GetMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MovieService_serviceDesc.Streams[0], "/pb.MovieService/GetMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceGetMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieService_GetMoviesClient interface {
	Recv() (*MovieInfo, error)
	grpc.ClientStream
}

type movieServiceGetMoviesClient struct {
	grpc.ClientStream
}

func (x *movieServiceGetMoviesClient) Recv() (*MovieInfo, error) {
	m := new(MovieInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) GetMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieInfo, error) {
	out := new(MovieInfo)
	err := c.cc.Invoke(ctx, "/pb.MovieService/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/pb.MovieService/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.MovieService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
type MovieServiceServer interface {
	GetMovies(*Empty, MovieService_GetMoviesServer) error
	GetMovie(context.Context, *Id) (*MovieInfo, error)
	CreateMovie(context.Context, *MovieInfo) (*Id, error)
	UpdateMovie(context.Context, *MovieInfo) (*Status, error)
	DeleteMovie(context.Context, *Id) (*Status, error)
}

// UnimplementedMovieServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (*UnimplementedMovieServiceServer) GetMovies(req *Empty, srv MovieService_GetMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (*UnimplementedMovieServiceServer) GetMovie(ctx context.Context, req *Id) (*MovieInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (*UnimplementedMovieServiceServer) CreateMovie(ctx context.Context, req *MovieInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (*UnimplementedMovieServiceServer) UpdateMovie(ctx context.Context, req *MovieInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (*UnimplementedMovieServiceServer) DeleteMovie(ctx context.Context, req *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}

func RegisterMovieServiceServer(s *grpc.Server, srv MovieServiceServer) {
	s.RegisterService(&_MovieService_serviceDesc, srv)
}

func _MovieService_GetMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).GetMovies(m, &movieServiceGetMoviesServer{stream})
}

type MovieService_GetMoviesServer interface {
	Send(*MovieInfo) error
	grpc.ServerStream
}

type movieServiceGetMoviesServer struct {
	grpc.ServerStream
}

func (x *movieServiceGetMoviesServer) Send(m *MovieInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovie(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*MovieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*MovieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _MovieService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _MovieService_GetMovie_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMovies",
			Handler:       _MovieService_GetMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "movieapp.proto",
}
